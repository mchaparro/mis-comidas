# Docker-compose configuration for development

version: '2'

services:
    django:
        build:
            context: .
            dockerfile: Dockerfile-django
        ports:
            - "3000:80"
        volumes:
            - "./ask_taltech_student:/app"
            - ".data/media:/files/media"
        environment:
            - PYTHONUNBUFFERED=0
        # Add -Wall option to see the (deprecation) warnings
        # command: python -Wall manage.py runserver 0.0.0.0:80
        command: python manage.py runserver 0.0.0.0:80
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        depends_on:
            - postgres
            - redis

    node:
        build:
            context: .
            dockerfile: Dockerfile-node
        ports:
            - "8000:8000"
            - "8001:8001"
        volumes:
            - "./app:/app"
            - ".data/node_modules:/app/node_modules"
        depends_on:
            - django

    postgres:
        image: postgres:10
        # Comment in the following lines to connect to your Dockerized instance of Postgres from your host machine.
        # Change the host port (before colon) if you have a local instance of Postgres running on that port.
        # ports:
        #     - "5432:5432"
        volumes:
            - ".data/postgres:/var/lib/postgresql/data"
        environment:
            POSTGRES_USER: ask_taltech_student
            POSTGRES_PASSWORD: ask_taltech_student

    celery:
        build:
            context: .
            dockerfile: Dockerfile-django
        volumes:
            - "./ask_taltech_student:/app"
            - ".data/media:/files/media"
        depends_on:
            - postgres
            - redis
        environment:
            - PYTHONUNBUFFERED=0
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        command: celery worker --app ask_taltech_student --autoscale 6,2 --loglevel INFO

    celery_beat:
        build:
            context: .
            dockerfile: Dockerfile-django
        container_name: ask_taltech_student_celery_beat
        volumes:
            - "./ask_taltech_student:/app"
            - ".data/celery:/celery"
        depends_on:
            - redis
        # Disable pidfile by specifying an empty one. We used fixed container_name which provides single-running-process
        #  guarantee and the lack of pidfile ensures that Celery Beat starts even if the Docker container was killed and
        #  then restarted (in which case the pidfile would still be present).
        command: celery beat --app ask_taltech_student --loglevel INFO --pidfile= --schedule /celery/celerybeat-schedule

    redis:
        image: redis:4.0.10-alpine
        volumes:
            - ".data/redis:/data"
